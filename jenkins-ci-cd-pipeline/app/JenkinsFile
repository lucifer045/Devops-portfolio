pipeline {
    agent any
    
    environment {
        IMAGE_NAME = "raghav045/devops-portfolio-app"
        TAG = "${env.BUILD_ID}"
        DOCKER_CRED = "docker-cred"
        SSH_CRED = "ec2-ssh-key"
    }
    stages {
        stage('Cleanup') {
            steps {
               deleteDir()   // deletes everything in workspace before cloning
              }
        }
        stage('Checkout') {
           steps {
              sh "git clone 'https://github.com/lucifer045/Devops-portfolio.git'"
            }
        }
        stage("Build Docker Image"){
            steps{
                sh "docker build -t ${IMAGE_NAME}:${TAG} -f Devops-portfolio/jenkins-ci-cd-pipeline/app/Dockerfile Devops-portfolio/jenkins-ci-cd-pipeline/app/"
            }
        }
       stage('Trivy Scan') {
          steps {
             sh """
                 docker run --rm \
                 -v /var/run/docker.sock:/var/run/docker.sock \
                 -v \$HOME/Library/Caches:/root/.cache/ \
                 aquasec/trivy:latest image --exit-code 1 --severity HIGH,CRITICAL ${IMAGE_NAME}:${TAG} || true
            """
            }
        }
        stage('Login and Push'){
           steps{
               withCredentials([usernamePassword(credentialsId: "${DOCKER_CRED}", usernameVariable: "DockerUser", passwordVariable: "DockerPass")]){
                   sh "echo \"$DockerPass\" | docker login -u \"$DockerUser\" --password-stdin "
                   sh "docker push ${IMAGE_NAME}:${TAG}"
               }
           }
        }
        stage('Deploy to EC2') {
          steps {
            sshagent (credentials: ["${SSH_CRED}"]) {
                sh """
                 ssh -o StrictHostKeyChecking=no ec2-user@ec2-18-219-200-168.us-east-2.compute.amazonaws.com '
                 sudo docker pull ${IMAGE_NAME}:${TAG} &&
                 sudo docker stop app || true &&
                 sudo docker rm app || true &&
                 sudo docker run -d --name app -p 80:5000 ${IMAGE_NAME}:${TAG} &&
                 sudo docker ps -a
                '
                """
              }
         }
      }
    }  
    post {
       always {
         echo "Pipeline finished"
         }
       failure {
         echo "Pipleine failed"
         }
    }
}
